/*

*Author: Ch Nitish Chandra , T P Varun

*Description: This lab will introduce you to the use of PWM on the ARM- Cortex-M4.
*In this lab we have designed RGB LED controller using SW1 and SW2 present in Launchpad board.RGB LED controller has two modes of operation. 
*Auto mode and Manual mode. At initial, when program is loaded controller will be in Auto mode. Combination of SW1 an SW2 has to be pressed to go to Manual mode.When Reset button is pressed, controller will go to Auto mode.

*Filename: lab-3.c

*Functions: Timer0IntHandler(), main()

*Global Variables:  ui32Load, ui8Adjust, redAdjust, greenAdjust, blueAdjust, delay, workingMode, sw1long, sw1short, sw2long, sw2short , state1, state2, currentCount1, currentCount2, sw1lp, sw1sp, sw2lp, sw2sp.


*/

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"
#include "driverlib/timer.h"
#include "driverlib/interrupt.h"
#include "inc/tm4c123gh6pm.h"

#define PWM_FREQUENCY 55

volatile uint32_t ui32Load;
volatile uint8_t ui8Adjust;


int redAdjust = 254, greenAdjust = 0, blueAdjust = 0;		// represent the intensities of the colors

int delay = 500000;		// delay between two iterations

#define MODE1 1
#define MODE2 2
#define MODE3 3
#define AUTO 4

int workingMode = AUTO;


int sw1long = 0, sw1short = 0, sw2long = 0, sw2short = 0;	// short/long press for switches

/*
*Function Name: main()

*Input: none

*Output: returns 0 when the code excutes without any errors

*Description: First, the function enables the pheripherals, timers, ports, interrupts and IO.

*In Auto mode color of the RGB LED follows a pattern in a cycle. In Auto mode SW1 will increase the speed of color transition
*  and SW2 will decrease the speed. 
* 
* In Manual mode, user must be able to select any one of the color from the color circle. For this
intensity of any of the 3 LEDs must be controlled independently.
* Mode 1 (Red LED control) - When SW2 is pressed continuously(long press) and SW1 is pressed
once controller goes to Manual Mode 1. In this mode, intensity of Red LED can be controlled using
SW1 and SW2.
* Mode 2 (Blue LED control) - When SW2 is pressed continuously(long press) and SW1 is pressed
twice controller goes to Manual Mode 2. In this mode, intensity of Blue LED can be controlled using
SW1 and SW2.
* Mode 3 (Green LED control) - When SW1 and SW2 are pressed continuously controller goes to
Manual Mode 3. In this mode, intensity of Green LED can be controlled using SW1 and SW2. 


*/


int main(void)
{
	volatile uint32_t ui32PWMClock;
	ui8Adjust = 254;


	uint32_t ui32Period;

	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
	SysCtlPWMClockSet(SYSCTL_PWMDIV_64);

	// Timer start

	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
	TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);

	ui32Period = (SysCtlClockGet() / 100) / 2;
	TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period -1);

	IntEnable(INT_TIMER0A);
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
	IntMasterEnable();

	TimerEnable(TIMER0_BASE, TIMER_A);

	// Timer end





	SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_2);
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_3);

	GPIOPinConfigure(GPIO_PF1_M1PWM5);
	GPIOPinConfigure(GPIO_PF2_M1PWM6);
	GPIOPinConfigure(GPIO_PF3_M1PWM7);



	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
	HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
	GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
	GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

	ui32PWMClock = SysCtlClockGet() / 64;
	ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1;
	PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN);
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, ui32Load);

	PWMGenConfigure(PWM1_BASE, PWM_GEN_3, PWM_GEN_MODE_DOWN);
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_3, ui32Load);


	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, ui8Adjust * ui32Load / 1000);
	PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, true);

	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, ui8Adjust * ui32Load / 1000);
	PWMOutputState(PWM1_BASE, PWM_OUT_6_BIT, true);

	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, ui8Adjust * ui32Load / 1000);
	PWMOutputState(PWM1_BASE, PWM_OUT_7_BIT, true);





	PWMGenEnable(PWM1_BASE, PWM_GEN_2);
	PWMGenEnable(PWM1_BASE, PWM_GEN_3);


	//Auto mode
	#define RG 0
	#define GB 1
	#define RB 2



	int mode = RG;


	while(1)
	{
		if(workingMode == AUTO){
			if(mode == RG){
				redAdjust--;
				greenAdjust++;
				if(redAdjust == 0){
					mode = GB;
				}
			}
			else if(mode == GB){
				greenAdjust--;
				blueAdjust++;
				if(greenAdjust == 0){
					mode = RB;
				}
			}
			else{
				redAdjust++;
				blueAdjust--;
				if(blueAdjust == 0){
					mode = RG;
				}
			}
			if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00){
				if(delay > 100000) delay -= 100000;
			}
			if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00){
				delay += 100000;
			}
		}
		else{
			if(workingMode == MODE1){
				if(sw1short == 1){//GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00){
					sw1short = 0;
					if(redAdjust > 10) redAdjust -= 10;
					else redAdjust = 0;
				}
				if(sw2short == 1){//GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00){
					sw2short = 0;
					if(redAdjust < 265) redAdjust += 10;
				}
			}
			if(workingMode == MODE2){
				if(sw1short == 1){//GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00){
					sw1short = 0;
					if(blueAdjust > 10) blueAdjust -= 10;
					else blueAdjust = 0;
				}
				if(sw2short == 1){//GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00){
					sw2short = 0;
					if(blueAdjust < 265) blueAdjust += 10;
				}

			}
			if(workingMode == MODE3){
				if(sw1short == 1){//GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00){
					sw1short = 0;
					if(greenAdjust > 10) greenAdjust -= 10;
					else greenAdjust = 0;
				}
				if(sw2short == 1){//GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00){
					sw2short = 0;
					if(greenAdjust < 265) greenAdjust += 10;
				}
			}
		}
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, redAdjust * ui32Load / 1000);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, greenAdjust * ui32Load / 1000);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, blueAdjust * ui32Load / 1000);
		SysCtlDelay(delay);
	}
}









#define IDLE 1
#define PRESS 2
#define RELEASE 3
#define PRESSED 0
#define NOTPRESSED 1


int state1= IDLE;
int state2= IDLE;


int currentCount1 = 0, currentCount2 = 0;



int sw1lp = 0, sw1sp = 0, sw2lp = 0, sw2sp = 0;



/*

Function Name: Timer0IntHandler()

*Input: none

*Output: none

*Description: This handler automates a state diagram to find if a key press is actually an input from user or due to noise. It uses timer to distinguish between states at 2 different points. If the state is PRESSED for 2 time intevals, then a press in considered.

*Example Call: Timer0IntHandler();

*/

void Timer0IntHandler(void)
{



// Clear the timer interrupt
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);



	// Read the current state of the GPIO pin and
	// write back the opposite state
	if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == PRESSED)
	{
		if (state1  == IDLE) state1 = PRESS;
		else if (state1 == PRESS) {
			state1 = RELEASE;
			currentCount1 = 1;
			sw1long = 0;
			sw1short = 0;
	
		}
		else{
			currentCount1++;
		}



	}
	else
	{
		if (state1 == PRESS) state1 = IDLE;
		else if (state1 == RELEASE){
			state1 = IDLE;
			if(currentCount1 >= 100){currentCount1 = 0; sw1long = 1;}
			else sw1short = 1;
		}
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
	}

	if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == PRESSED)
	{
		if (state2  == IDLE) state2 = PRESS;
		else if (state2 == PRESS) {state2 = RELEASE;
			currentCount2 = 1;
			sw2short = 0;
			sw2long = 0;
	//		sw2Status++;
		}
		else{
			if(sw1short == 1){
				sw1short = 0;
				sw1sp++;
			}
			if(sw1long == 1){
				sw1long = 0;
				sw1lp++;
			}
			currentCount2++;
		}



	}
	else
	{
		if (state2 == PRESS) state2 = IDLE;
		else if (state2 == RELEASE){
			if(currentCount2 >= 100){currentCount2 = 0; sw2long = 1;}
			else sw2short = 1;


			if(sw1sp == 1 && sw1lp == 0 && sw2long > 0) {workingMode = MODE1;sw1sp = sw1lp = sw2sp = sw2lp = 0;}
			else if(sw1sp >= 2 && sw1lp == 0 && sw2long > 0) {workingMode = MODE2; sw1sp = sw1lp = sw2sp = sw2lp = 0;}
			else if(sw1lp == 1 && sw2long > 0) {workingMode = MODE3; sw1sp = sw1lp = sw2sp = sw2lp = 0;}
			state2 = IDLE;

		}
		//GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
	}
}
