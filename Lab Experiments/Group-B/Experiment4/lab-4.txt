/*

*Author: Ch Nitish Chandra , T P Varun

*Description: A code to indicate temperature of TIVA board using in built ADC, in built temperature sensor
and serial communication (UART).

*Filename: lab-4.c

*Functions: setup(), switchPinConfig(), Timer0IntHandler(), ledPinConfig(), my_print(), my_print_number(), my_print_single_number(), UARTIntHandler(), main()

*Global Variables: ui32TempAvg, ui32TempValueC, ui32TempValueF, MONITOR, first_digit, second_digit.
uint32_t set_temp = 19;


*/



#include<stdint.h>
#include<stdbool.h>
#include"inc/hw_memmap.h"

#include"inc/hw_types.h"

#include"driverlib/gpio.h"
#include"driverlib/pin_map.h"
#include "inc/hw_ints.h"
#include"driverlib/debug.h"
#include"driverlib/sysctl.h"
#include"driverlib/uart.h"
#include"driverlib/adc.h"
#include "driverlib/interrupt.h"


#define LOCK_F (*((volatile unsigned long *)0x40025520))
#define CR_F   (*((volatile unsigned long *)0x40025524))



//#include "utils/uartstdio.c"

	// variables for storing the values of temperature
	volatile uint32_t ui32TempAvg;
	volatile uint32_t ui32TempValueC;
	volatile uint32_t ui32TempValueF;


/*
*Function Name: setup()

*Input: none

*Output: none

*Description: Set crystal frequency and enable GPIO Peripherals

Function Call: setup()

*/

void setup(void)
{
	SysCtlClockSet(SYSCTL_SYSDIV_4|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
}


/*
*Function Name: switchPinConfig()

*Input: none

*Output: none

*Description: Set PORTF Pin 0 and Pin 4 as input. Note that Pin 0 is locked.

Function Call: switchPinConfig()

*/


void switchPinConfig(void)
{
	// Following two line removes the lock from SW2 interfaced on PORTF Pin0 -- leave this unchanged
	LOCK_F=0x4C4F434BU;
	CR_F=GPIO_PIN_0|GPIO_PIN_4;

	// GPIO PORTF Pin 0 and Pin4
	GPIODirModeSet(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_0,GPIO_DIR_MODE_IN); // Set Pin-4 of PORT F as Input. Modifiy this to use another switch
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0);
	GPIOPadConfigSet(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_0,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);

}

/*
*Function Name: ledPinConfig()

*Input: none

*Output: none

*Description: Set PORTF Pin 1, Pin 2, Pin 3 as output.

Function Call: ledPinConfig()

*/



void ledPinConfig(void)
{
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);  // Pin-1 of PORT F set as output. Modifiy this to use other 2 LEDs.
}


/*
*Function Name: my_print()

*Input: pointer to array of characters, length of the array

*Output: none

*Description: Prints the input array of characters to the UART terminal using the function UARTCharPut()

*Function Call: my_print("Enter Temperature: ", 19);

*/


void my_print(char buf[], int len){
	int i = 0;
	for(; i < len; i++){
		UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);

		UARTCharPut(UART0_BASE, buf[i]);
	}
}
#define MONITOR 0
#define SET 1
#define WAIT1 2
#define WAIT2 3


int mode = MONITOR;
int first_digit, second_digit;
uint32_t set_temp = 19;


/*
*Function Name: my_print_number()

*Input: integer to be printed

*Output: none

*Description: Prints the input integer digit after digit to the UART terminal using the function UARTCharPut()

Function Call: my_print_number(set_temp);

*/


void my_print_number(int n){
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);

	UARTCharPut(UART0_BASE, n/10 + '0');

	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);

	UARTCharPut(UART0_BASE, n%10 + '0');
}


/*
*Function Name: my_print_single_number()

*Input: single digit integer to be printed

*Output: none

*Description: Prints the input single digit integer to the UART terminal using the function UARTCharPut()

Function Call: my_print_single_number(second_digit);

*/

void my_print_single_number(int n){
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
	UARTCharPut(UART0_BASE, n + '0');
}

/*
*Function Name: UARTIntHandler()

*Input: none

*Output: none

*Description: It has 3 modes. In the first mode(monitoring), its waits for a character input.If its S , it asks for input temperature and goes to WAIT1

*in WAIT1 and WAIT2, the temperature is printed based on the inputs from the sensor
 
* Function Call: UARTIntHandler();

*/


void UARTIntHandler(void){
	uint32_t ui32Status;
	ui32Status = UARTIntStatus(UART0_BASE, true);
	UARTIntClear(UART0_BASE, ui32Status);
	if(mode == MONITOR){
		if(UARTCharGetNonBlocking(UART0_BASE) == 'S'){
			mode = WAIT1;
			my_print("Enter Temperature: ", 19);
		}
	}
	else if(mode == WAIT1){
		first_digit = UARTCharGetNonBlocking(UART0_BASE) - '0';
		my_print_single_number(first_digit);
		mode = WAIT2;
	}
	else if(mode == WAIT2){
		second_digit = UARTCharGetNonBlocking(UART0_BASE) - '0';
		my_print_single_number(second_digit);
		my_print("\n", 1);
		set_temp = first_digit * 10 + second_digit;
		my_print("Set Temperature updated to ", 27);
		my_print_number(set_temp);
		UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
		UARTCharPut(UART0_BASE, 167);
		my_print("C\n", 2);
		mode = MONITOR;
	}
}


/*
*Function Name: main()

*Input: none

*Output: returns 0 when the code executes completely with no errors.

*Description: First, the function enables the pheripherals, timers, ports, interrupts and IO.

* Then, its takes 4 readings from sensor and puts their average as the new temperature value.

* It also changes LED color based on the temperature values.

*/


int main(void)
{
	setup();
	ledPinConfig();
	switchPinConfig();


	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

	GPIOPinConfigure(GPIO_PA0_U0RX);
	GPIOPinConfigure(GPIO_PA1_U0TX);
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);

	IntMasterEnable();
	IntEnable(INT_UART0);
	UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);

	UARTCharPut(UART0_BASE, 'a');
	my_print("Printing things", 15);


	uint32_t ui32ADC0Value[4];

	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
	ADCHardwareOversampleConfigure(ADC0_BASE, 64);


	ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);

	ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS);
	ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);
	ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);


	ADCSequenceStepConfigure(ADC0_BASE,1,3,ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);

	ADCSequenceEnable(ADC0_BASE, 1);

	while(1)
	{
		if(mode == MONITOR){
			ADCIntClear(ADC0_BASE, 1);
			ADCProcessorTrigger(ADC0_BASE, 1);
			while(!ADCIntStatus(ADC0_BASE, 1, false))
			{
			}

			ADCSequenceDataGet(ADC0_BASE, 1, ui32ADC0Value);

			ui32TempAvg = (ui32ADC0Value[0] + ui32ADC0Value[1] + ui32ADC0Value[2] + ui32ADC0Value[3] + 2)/4;

			ui32TempValueC = (1475 - ((2475 * ui32TempAvg)) / 4096)/10;

			ui32TempValueF = ((ui32TempValueC * 9) + 160) / 5;
			//UARTCharPut(UART0_BASE, 'e');

			SysCtlDelay(SysCtlClockGet()/3);
			my_print("Current Temperature: ", 21);
			UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
			UARTCharPut(UART0_BASE, ui32TempValueC/10 + '0');
			UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
			UARTCharPut(UART0_BASE, ui32TempValueC%10 + '0');
			UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
			UARTCharPut(UART0_BASE, 167);
			UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
			UARTCharPut(UART0_BASE, 'C');
			UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
			my_print(", Set Temp = ", 13);
			my_print_number(set_temp);
			UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE);
			UARTCharPut(UART0_BASE, 167);
			my_print("C\n", 2);

			if(ui32TempValueC < set_temp){
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 8); //8 is green
			}
			else 		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 2); //2 is red
		}
	}

	return 0;
}
