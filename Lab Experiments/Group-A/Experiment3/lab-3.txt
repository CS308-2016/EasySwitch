/*

* Team Leader's Name : Nitish Chandra
* Author List: Saicharan, Siddhant
* Filename: lab-3.c
* Functions: detectKeyPress(void), main(void)
* Global Variables: sw1,num,state


*/
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"

#define PWM_FREQUENCY 55

volatile int sw1; //stores state of sw1
volatile int num; //checks if press is a long press
volatile int state; //used to check which light intensity to change in manual mode
/*
* Function Name: detectKeyPress
* Input: void
* Output: int
* Logic: State diagram which checks if a keypress has been made based on sw1
*/
int detectKeyPress() {

	if(sw1 == 1)
	{
		if (!GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)) {
			sw1 = 2;
		}
		return 0;
	}
	if(sw1 == 2)
	{
		if (!GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)) {
			sw1 = 3;
			return 1;
		}
		else {
			return 0;
		}
	}

	if(sw1 == 3)
	{
		if (!GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)) {
			return 0;
		}
		else {
			sw1 = 1;
			return 0;
		}
	}
	return 0;
}
/*
* Function Name: main
* Input: void
* Output: int
* Logic: switches, clock set, pwm configured. then 2 stages: one is automatic where led colour changes on its own
*		 other manual where depending on state and switches r,g or b intensity is changed
*/
int main(void) {
	volatile uint32_t ui32Load; //used to set pulse width
	volatile uint32_t ui32PWMClock; //stores freqeuncy /64
	volatile uint8_t ui8AdjustR; //red led intensity
	volatile uint8_t ui8AdjustG; //green led intensity
	volatile uint8_t ui8AdjustB; //blue led intensity
	volatile int t; //some sort of count variable to change intensity
	int delay_var; //time delay variable
	t = 0;
	ui8AdjustR = 120;
	ui8AdjustG = 0;
	ui8AdjustB = 0;
	delay_var = 1000000;
	sw1 = 1;

	//setup
	SysCtlClockSet(SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
	SysCtlPWMClockSet(SYSCTL_PWMDIV_64);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	//GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|  GPIO_PIN_2 | GPIO_PIN_3);
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);
	GPIOPinConfigure(GPIO_PF1_M1PWM5);
	GPIOPinConfigure(GPIO_PF2_M1PWM6);
	GPIOPinConfigure(GPIO_PF3_M1PWM7);
	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
	HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
	HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
	GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0, GPIO_DIR_MODE_IN);
	GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_0,
	GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
	ui32PWMClock = SysCtlClockGet() / 64;
	ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1;
	PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN);
	PWMGenConfigure(PWM1_BASE, PWM_GEN_3, PWM_GEN_MODE_DOWN);
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, ui32Load);
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_3, ui32Load);
	//PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, ui8AdjustR * ui32Load / 1000);
	//PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, ui8AdjustB * ui32Load / 1000);
	//PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, ui8AdjustG * ui32Load / 1000);
	PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT | PWM_OUT_6_BIT | PWM_OUT_7_BIT,
	true);
	PWMGenEnable(PWM1_BASE, PWM_GEN_2);
	PWMGenEnable(PWM1_BASE, PWM_GEN_3);
	//setup done
	int c_var; //stores t%360 for intensity

	while (1) {
		//automatic changing of color
		c_var = t % 360;
		if (c_var < 120) {
			ui8AdjustR = 120 - c_var;
			ui8AdjustG = c_var;
			ui8AdjustB = 0;
		}
		else if (c_var < 240) {
			ui8AdjustR = 0;
			ui8AdjustG = 240 - c_var;
			ui8AdjustB = c_var - 120;
		}
		else {
			ui8AdjustR = c_var - 240;
			ui8AdjustG = 0;
			ui8AdjustB = 360 - c_var;
		}
		if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)))
		{
			if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0)))
			{
				sw1 = 2;
				break;
			}
			delay_var = delay_var - 100000;
			if (delay_var < 100000)
				delay_var = 100000;
		}
		if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0)))
		{
			if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)))
			{
				sw1 = 2;
				break;
			}
			delay_var = delay_var + 100000;
			if (delay_var > 2000000)
				delay_var = 2000000;
		}
		//ui8AdjustR=1;
		//ui8AdjustG=200;
		//ui8AdjustB=1;
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, 1 + ui8AdjustR * ui32Load / 1000);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, 1 + ui8AdjustB * ui32Load / 1000);
		PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, 1 + ui8AdjustG * ui32Load / 1000);
		t++;
		SysCtlDelay(delay_var);
	}

	while (1) {
		//in manual mode. based on state pressing switch 1 and 2 changes intensity of that color
		num=0;
		volatile int sw1count;
		sw1count = 0;
		state = 0;
		SysCtlDelay(SysCtlClockGet() / 50);
		while (1) {
			sw1count = sw1count + detectKeyPress();
			if (sw1 == 1 || sw1 == 2)
				num = 0;
			if (sw1 == 3)
				num = num + 1;
			if (num > 10) {
				state = 1;
				while (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0))
						|| !(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4))) {
				}
				break;
			}
			SysCtlDelay(SysCtlClockGet() / 50);
			if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0)
					&& GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) )
				break;
		}
		if(state) {
			int sp1=0;
			int sp2=0;
			while (1) {
				if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0))
						&& !(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4))) {
					sw1 = 2;
					break;
				}
				if ((GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)) && sp1==1) {
					ui8AdjustG=ui8AdjustG-10;
					if (ui8AdjustG <= 10) {
						ui8AdjustG = 10;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7,
							ui8AdjustG * ui32Load / 1000);
				}

				if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)))
					sp1=1;

				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4))
					sp1=0;

				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) && sp2==1) {
					ui8AdjustG=ui8AdjustG + 10;
					if (ui8AdjustG > 120) {
						ui8AdjustG = 120;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7,
							ui8AdjustG * ui32Load / 1000);
				}

				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
					sp2=1;

				if (! GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
					sp2=0;


				SysCtlDelay(100000);

			}
		}
		else if(sw1count==1) {
			int sp1=0;
			int sp2=0;
			while (1) {
				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00
						&& GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00) {
					sw1 = 2;
					break;
				}
				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) != 0x00 && sp1==1) {
					ui8AdjustR=ui8AdjustR-10;
					if (ui8AdjustR <= 10) {
						ui8AdjustR = 10;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5,
							ui8AdjustR * ui32Load / 1000);
				}

				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00)
					sp1=1;

				if (! GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00)
					sp1=0;

				if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00) && sp2==1) {
					ui8AdjustR=ui8AdjustR + 10;
					if (ui8AdjustR > 120) {
						ui8AdjustR = 120;
					}
					PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5,
							ui8AdjustR * ui32Load / 1000);
				}

				if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
					sp2=1;

				if (! GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
					sp2=0;


				SysCtlDelay(100000);

			}
		}
			else {
				int sp1=0;
				int sp2=0;
				while (1) {
					if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00
							&& GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00) {
						sw1 = 2;
						break;
					}
					if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) != 0x00 && sp1==1) {
						ui8AdjustB=ui8AdjustB-10;
						if (ui8AdjustB <= 10) {
							ui8AdjustB = 10;
						}
						PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6,
								ui8AdjustB * ui32Load / 1000);
					}

					if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00)
						sp1=1;

					if (! GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4) == 0x00)
						sp1=0;

					if (!(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00) && sp2==1) {
						ui8AdjustB=ui8AdjustB + 10;
						if (ui8AdjustB > 120) {
							ui8AdjustB = 120;
						}
						PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6,
								ui8AdjustB * ui32Load / 1000);
					}

					if (GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
						sp2=1;

					if (! GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0) == 0x00)
						sp2=0;


					SysCtlDelay(100000);
				}
			}
		}
}
